{"version":3,"sources":["components/EarthquakeList.js","components/EarthquakeInfo.js","components/App.js","registerServiceWorker.js","index.js"],"names":["EarthquakeList","react_default","a","createElement","className","this","props","earthquakes","features","map","quake","key","id","properties","place","mag","moment","time","format","geometry","coordinates","href","url","Component","EarthquakeInfo","length","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","r","json","setState","interval","setInterval","console","log","clearInterval","components_EarthquakeInfo","lib_default","ticking","timezone","components_EarthquakeList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8cd22899.chunk.js","sourcesContent":["import React, { Component } from 'react'\n/*build list that populates by looping over using map*/\nimport moment from 'moment'\n\nclass EarthquakeList extends Component {\n\n  render () {\n    return (\n      <div className='quake-list'>\n        <div className='row'>\n          {this.props.earthquakes.features.map(quake => {\n            return <div className='cardigan' key={quake.id}>\n              <div className='card' >\n                <div className='cardBlock'>\n                  <h1 className='cardTitle'>{quake.properties.place}</h1>\n                  <h2 className='cardStuff'>Magnitude: {quake.properties.mag}</h2>\n                  <h3 className='cardStuff'>Time: {moment(quake.properties.time).format('LLLL')}</h3>\n                  <p className='cardStuff'>Coordinates: {quake.geometry.coordinates}</p>\n                  <a href={quake.properties.url} className='cardLink'>USGS Event Link</a>\n                </div>\n              </div>\n            </div>\n          })}\n        </div>\n      </div>\n    )\n  }\n}\nexport default EarthquakeList\n","import React, { Component } from 'react'\n/*get the number of earthquakes using data*/\nclass EarthquakeInfo extends Component {\n\n  render () {\n    return (\n      <div className='supertitle'>\n        {this.props.earthquakes.features.length > 0 &&\n          <span>This is a list of {this.props.earthquakes.features.length} Earthquakes occurring in the last hour across the United States.\n          </span>\n        }\n      </div>\n    )\n  }\n}\nexport default EarthquakeInfo\n","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport Clock from 'react-live-clock';\nimport EarthquakeList from './EarthquakeList'\nimport EarthquakeInfo from './EarthquakeInfo'\n\n\nclass App extends Component {\n\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      earthquakes: {\n        features: []\n      }\n    }\n  }\n  //mount w/ api and then set the new state from above with api info\n  componentWillMount () {\n      fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson')\n      .then(r => r.json())\n      .then(json => {\n        this.setState({\n          earthquakes: json\n        })\n\n      })\n      //intervalllllllllll!!!\n      this.interval = setInterval(() => {\n        fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson')\n        .then(r => r.json())\n        .then(json => {\n          this.setState({\n            earthquakes: json\n          })\n          console.log('updated with entire dataset!', json)\n        })\n      }, 20000)\n    }\n    //must clear old data out after refresh\n    componentWillUnmount () {\n      clearInterval(this.interval)\n    }\n  render () {\n    return (\n      <div className='App'>\n\n        <div className='title'>\n          <div className='my-header'>\n            <h1>Whats shaking? Earthquake!</h1>\n          </div>\n          <EarthquakeInfo earthquakes={this.state.earthquakes} />\n          <Clock format={'HH:mm:ss'} ticking={true} timezone={'US/Pacific'} className='time' />\n        </div>\n        <EarthquakeList earthquakes={this.state.earthquakes} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}